#!/usr/bin/env python3

# Copyright (c) YugaByte, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied.  See the License for the specific language governing permissions and limitations
# under the License.

"""
Runs the PVS Studio static analyzer on YugabyteDB's C/C++ code.
"""

import argparse
import os
import subprocess
import logging
from overrides import overrides

from yugabyte_pycommon import init_logging, mkdir_p
from yb.common_util import YB_SRC_ROOT
from yb.tool_base import YbBuildToolBase
from yb.compile_commands import read_raw_compile_commands_file_paths


class PvsStudioAnalyzerTool(YbBuildToolBase):
    def __init__(self):
        super().__init__()

    @overrides
    def run_impl(self):
        self.run_pvs_analyzer()

    @overrides
    def get_description(self):
        return __doc__

    def run_pvs_analyzer(self):
        pvs_config_path = os.path.join(self.args.build_root, 'PVS-Studio.cfg')

        rules_config_path = os.path.join(YB_SRC_ROOT, 'yugabytedb.pvsconfig')
        if not os.path.exists(rules_config_path):
            raise IOError(
                "PVS Studio rules configuration file does not exist: %s" % rules_config_path)

        compile_commands_path = os.path.join(
            self.args.build_root, 'combined_compile_commands.json')
        if not os.path.exists(compile_commands_path):
            raise IOError("Compilation commands file does not exist: %s" % compile_commands_path)

        with open(pvs_config_path, 'w') as pvs_config_file:
            pvs_config_file.write(
                '# This file was automatically generated by %s.\n'
                'rules-config=%s\n' % (
                    __file__,
                    rules_config_path))

        pvs_output_dir = os.path.join(self.args.build_root, 'pvs_output')
        mkdir_p(pvs_output_dir)
        pvs_log_path = os.path.join(pvs_output_dir, 'pvs_results.log')
        raw_compile_commands_paths = sorted(
            read_raw_compile_commands_file_paths(self.args.build_root))

        for raw_compile_commands_path in raw_compile_commands_paths:
            analyzer_cmd_line = [
                'pvs-studio-analyzer',
                'analyze',
                '--cfg',
                pvs_config_path,
                '--file',
                raw_compile_commands_path,
                '--output-file',
                pvs_log_path
            ]
            logging.info("Running command: %s", analyzer_cmd_line)
            subprocess.check_call(analyzer_cmd_line)


def main():
    init_logging()
    PvsStudioAnalyzerTool().run()


if __name__ == '__main__':
    main()